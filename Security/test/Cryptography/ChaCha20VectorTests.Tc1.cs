
using Mettle;
using NerdyMishka.Security.Cryptography;
using Xunit;

namespace Tests
{
    public partial class ChaCha20VectorTests
    {
        [UnitTest]
        public static void TC1_8Rounds()
        {
            var key = new byte[] {
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            };

            var iv = new byte[] {
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            };

            var block1 = new byte[] {
                0xe2, 0x8a, 0x5f, 0xa4, 0xa6, 0x7f, 0x8c, 0x5d,
                0xef, 0xed, 0x3e, 0x6f, 0xb7, 0x30, 0x34, 0x86,
                0xaa, 0x84, 0x27, 0xd3, 0x14, 0x19, 0xa7, 0x29,
                0x57, 0x2d, 0x77, 0x79, 0x53, 0x49, 0x11, 0x20,
                0xb6, 0x4a, 0xb8, 0xe7, 0x2b, 0x8d, 0xeb, 0x85,
                0xcd, 0x6a, 0xea, 0x7c, 0xb6, 0x08, 0x9a, 0x10,
                0x18, 0x24, 0xbe, 0xeb, 0x08, 0x81, 0x4a, 0x42,
                0x8a, 0xab, 0x1f, 0xa2, 0xc8, 0x16, 0x08, 0x1b,
            };

            var block2 = new byte[] {
                0x8a, 0x26, 0xaf, 0x44, 0x8a, 0x1b, 0xa9, 0x06,
                0x36, 0x8f, 0xd8, 0xc8, 0x38, 0x31, 0xc1, 0x8c,
                0xec, 0x8c, 0xed, 0x81, 0x1a, 0x02, 0x8e, 0x67,
                0x5b, 0x8d, 0x2b, 0xe8, 0xfc, 0xe0, 0x81, 0x16,
                0x5c, 0xea, 0xe9, 0xf1, 0xd1, 0xb7, 0xa9, 0x75,
                0x49, 0x77, 0x49, 0x48, 0x05, 0x69, 0xce, 0xb8,
                0x3d, 0xe6, 0xa0, 0xa5, 0x87, 0xd4, 0x98, 0x4f,
                0x19, 0x92, 0x5f, 0x5d, 0x33, 0x8e, 0x43, 0x0d,
            };

            var stream1 = new byte[64];
            var buffer = new uint[16];
            var state = ChaCha20Transform.CreateState(key, iv, 0);

            // block1
            ChaCha20Transform.AddXorRotate(state, 8, buffer, stream1);
            Assert.Equal(block1, stream1);

            // block 2
            ChaCha20Transform.AddXorRotate(state, 8, buffer, stream1);
            Assert.Equal(block2, stream1);
        }

        [UnitTest]
        public static void TC1_12Rounds()
        {
            var key = new byte[] {
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            };

            var iv = new byte[] {
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            };

            var block1 = new byte[] {
                0xe1, 0x04, 0x7b, 0xa9, 0x47, 0x6b, 0xf8, 0xff,
                0x31, 0x2c, 0x01, 0xb4, 0x34, 0x5a, 0x7d, 0x8c,
                0xa5, 0x79, 0x2b, 0x0a, 0xd4, 0x67, 0x31, 0x3f,
                0x1d, 0xc4, 0x12, 0xb5, 0xfd, 0xce, 0x32, 0x41,
                0x0d, 0xea, 0x8b, 0x68, 0xbd, 0x77, 0x4c, 0x36,
                0xa9, 0x20, 0xf0, 0x92, 0xa0, 0x4d, 0x3f, 0x95,
                0x27, 0x4f, 0xbe, 0xff, 0x97, 0xbc, 0x84, 0x91,
                0xfc, 0xef, 0x37, 0xf8, 0x59, 0x70, 0xb4, 0x50,
            };

            var block2 = new byte[] {
                0x1d, 0x43, 0xb6, 0x1a, 0x8f, 0x7e, 0x19, 0xfc,
                0xed, 0xde, 0xf3, 0x68, 0xae, 0x6b, 0xfb, 0x11,
                0x10, 0x1b, 0xd9, 0xfd, 0x3e, 0x4d, 0x12, 0x7d,
                0xe3, 0x0d, 0xb2, 0xdb, 0x1b, 0x47, 0x2e, 0x76,
                0x42, 0x68, 0x03, 0xa4, 0x5e, 0x15, 0xb9, 0x62,
                0x75, 0x19, 0x86, 0xef, 0x1d, 0x9d, 0x50, 0xf5,
                0x98, 0xa5, 0xdc, 0xdc, 0x9f, 0xa5, 0x29, 0xa2,
                0x83, 0x57, 0x99, 0x1e, 0x78, 0x4e, 0xa2, 0x0f,
            };

            var stream1 = new byte[64];
            var buffer = new uint[16];
            var state = ChaCha20Transform.CreateState(key, iv, 0);

            // block1
            ChaCha20Transform.AddXorRotate(state, 12, buffer, stream1);
            Assert.Equal(block1, stream1);

            // block 2
            ChaCha20Transform.AddXorRotate(state, 12, buffer, stream1);
            Assert.Equal(block2, stream1);
        }



        [UnitTest]
        public static void TC1_20Rounds()
        {
            var key = new byte[] {
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            };

            var iv = new byte[] {
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            };

            var block1 = new byte[] {
                0x89, 0x67, 0x09, 0x52, 0x60, 0x83, 0x64, 0xfd,
                0x00, 0xb2, 0xf9, 0x09, 0x36, 0xf0, 0x31, 0xc8,
                0xe7, 0x56, 0xe1, 0x5d, 0xba, 0x04, 0xb8, 0x49,
                0x3d, 0x00, 0x42, 0x92, 0x59, 0xb2, 0x0f, 0x46,
                0xcc, 0x04, 0xf1, 0x11, 0x24, 0x6b, 0x6c, 0x2c,
                0xe0, 0x66, 0xbe, 0x3b, 0xfb, 0x32, 0xd9, 0xaa,
                0x0f, 0xdd, 0xfb, 0xc1, 0x21, 0x23, 0xd4, 0xb9,
                0xe4, 0x4f, 0x34, 0xdc, 0xa0, 0x5a, 0x10, 0x3f,
            };

            var block2 = new byte[] {
                0x6c, 0xd1, 0x35, 0xc2, 0x87, 0x8c, 0x83, 0x2b,
                0x58, 0x96, 0xb1, 0x34, 0xf6, 0x14, 0x2a, 0x9d,
                0x4d, 0x8d, 0x0d, 0x8f, 0x10, 0x26, 0xd2, 0x0a,
                0x0a, 0x81, 0x51, 0x2c, 0xbc, 0xe6, 0xe9, 0x75,
                0x8a, 0x71, 0x43, 0xd0, 0x21, 0x97, 0x80, 0x22,
                0xa3, 0x84, 0x14, 0x1a, 0x80, 0xce, 0xa3, 0x06,
                0x2f, 0x41, 0xf6, 0x7a, 0x75, 0x2e, 0x66, 0xad,
                0x34, 0x11, 0x98, 0x4c, 0x78, 0x7e, 0x30, 0xad,
            };

            var stream1 = new byte[64];
            var buffer = new uint[16];
            var state = ChaCha20Transform.CreateState(key, iv, 0);

            // block1
            ChaCha20Transform.AddXorRotate(state, 20, buffer, stream1);
            Assert.Equal(block1, stream1);

            // block 2
            ChaCha20Transform.AddXorRotate(state, 20, buffer, stream1);
            Assert.Equal(block2, stream1);
        }
    }
}