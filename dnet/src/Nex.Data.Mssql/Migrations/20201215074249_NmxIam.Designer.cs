// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Nex.Data.Mssql.Model;

namespace Nex.Data.Mssql.Migrations
{
    [DbContext(typeof(NexMssqlDbContext))]
    [Migration("20201215074249_NmxIam")]
    partial class NmxIam
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("nex")
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("GroupPermission", b =>
                {
                    b.Property<int>("GroupsId")
                        .HasColumnType("int")
                        .HasColumnName("group_id");

                    b.Property<int>("PermissionsId")
                        .HasColumnType("int")
                        .HasColumnName("permission_id");

                    b.HasKey("GroupsId", "PermissionsId")
                        .HasName("pk_group_permissions");

                    b.HasIndex("PermissionsId")
                        .HasDatabaseName("ix_group_permissions_permission_id");

                    b.ToTable("group_permissions");
                });

            modelBuilder.Entity("GroupRole", b =>
                {
                    b.Property<int>("GroupsId")
                        .HasColumnType("int")
                        .HasColumnName("group_id");

                    b.Property<int>("RolesId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.HasKey("GroupsId", "RolesId")
                        .HasName("pk_group_roles");

                    b.HasIndex("RolesId")
                        .HasDatabaseName("ix_group_roles_role_id");

                    b.ToTable("group_roles");
                });

            modelBuilder.Entity("GroupServiceAccount", b =>
                {
                    b.Property<int>("GroupsId")
                        .HasColumnType("int")
                        .HasColumnName("group_id");

                    b.Property<int>("ServiceAccountsId")
                        .HasColumnType("int")
                        .HasColumnName("service_account_id");

                    b.HasKey("GroupsId", "ServiceAccountsId")
                        .HasName("pk_group_service_accounts");

                    b.HasIndex("ServiceAccountsId")
                        .HasDatabaseName("ix_group_service_accounts_service_account_id");

                    b.ToTable("group_service_accounts");
                });

            modelBuilder.Entity("GroupUser", b =>
                {
                    b.Property<int>("OwnedGroupsId")
                        .HasColumnType("int")
                        .HasColumnName("owned_group_id");

                    b.Property<int>("OwnersId")
                        .HasColumnType("int")
                        .HasColumnName("owner_id");

                    b.HasKey("OwnedGroupsId", "OwnersId")
                        .HasName("pk_group_users");

                    b.HasIndex("OwnersId")
                        .HasDatabaseName("ix_group_users_owner_id");

                    b.ToTable("group_owners");
                });

            modelBuilder.Entity("GroupUser1", b =>
                {
                    b.Property<int>("GroupsId")
                        .HasColumnType("int")
                        .HasColumnName("group_id");

                    b.Property<int>("MembersId")
                        .HasColumnType("int")
                        .HasColumnName("member_id");

                    b.HasKey("GroupsId", "MembersId")
                        .HasName("pk_group_user1s");

                    b.HasIndex("MembersId")
                        .HasDatabaseName("ix_group_user1s_member_id");

                    b.ToTable("group_members");
                });

            modelBuilder.Entity("Nex.Data.Model.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("name");

                    b.Property<Guid>("SyncId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("sync_id");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int")
                        .HasColumnName("tenant_id");

                    b.HasKey("Id")
                        .HasName("pk_groups");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("ix_groups_tenant_id");

                    b.ToTable("groups", "nex");
                });

            modelBuilder.Entity("Nex.Data.Model.Permission", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_permissions");

                    b.ToTable("permissions", "nex");
                });

            modelBuilder.Entity("Nex.Data.Model.PersonalAccessToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("expires_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("name");

                    b.Property<int?>("ServiceAccountId")
                        .HasColumnType("int")
                        .HasColumnName("service_account_id");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_personal_access_tokens");

                    b.HasIndex("ServiceAccountId")
                        .HasDatabaseName("ix_personal_access_tokens_service_account_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_personal_access_tokens_user_id");

                    b.ToTable("personal_access_tokens", "nex");
                });

            modelBuilder.Entity("Nex.Data.Model.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .UseIdentityColumn();

                    b.Property<short>("KnownRoleId")
                        .HasColumnType("smallint")
                        .HasColumnName("known_role_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("name");

                    b.Property<int?>("PersonalAccessTokenId")
                        .HasColumnType("int")
                        .HasColumnName("personal_access_token_id");

                    b.Property<Guid>("SyncId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("sync_id");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int")
                        .HasColumnName("tenant_id");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.HasIndex("PersonalAccessTokenId")
                        .HasDatabaseName("ix_roles_personal_access_token_id");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("ix_roles_tenant_id");

                    b.ToTable("roles", "nex");
                });

            modelBuilder.Entity("Nex.Data.Model.ServiceAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("name");

                    b.Property<Guid>("SyncId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("sync_id");

                    b.HasKey("Id")
                        .HasName("pk_service_accounts");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_service_accounts_name");

                    b.ToTable("service_accounts", "nex");
                });

            modelBuilder.Entity("Nex.Data.Model.ServiceAccountKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("expires_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_service_account_keys");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_service_account_keys_name");

                    b.ToTable("service_account_keys", "nex");
                });

            modelBuilder.Entity("Nex.Data.Model.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("name");

                    b.Property<Guid>("SyncId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("sync_id");

                    b.HasKey("Id")
                        .HasName("pk_tenants");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_tenants_name");

                    b.ToTable("tenants", "nex");
                });

            modelBuilder.Entity("Nex.Data.Model.TenantDomain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .UseIdentityColumn();

                    b.Property<string>("Domain")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("domain");

                    b.Property<int>("TenantId")
                        .HasColumnType("int")
                        .HasColumnName("tenant_id");

                    b.HasKey("Id")
                        .HasName("pk_tenant_domains");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("ix_tenant_domains_tenant_id");

                    b.ToTable("tenant_domains", "nex");
                });

            modelBuilder.Entity("Nex.Data.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .UseIdentityColumn();

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("email");

                    b.Property<string>("EmailHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("email_hash");

                    b.Property<string>("Pseudonym")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("pseudonym");

                    b.Property<Guid>("SyncId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("sync_id");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int")
                        .HasColumnName("tenant_id");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .HasDatabaseName("ix_users_email");

                    b.HasIndex("EmailHash")
                        .HasDatabaseName("ix_users_email_hash");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("ix_users_tenant_id");

                    b.ToTable("users", "nex");
                });

            modelBuilder.Entity("PermissionRole", b =>
                {
                    b.Property<int>("PermissionsId")
                        .HasColumnType("int")
                        .HasColumnName("permission_id");

                    b.Property<int>("RolesId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.HasKey("PermissionsId", "RolesId")
                        .HasName("pk_permission_roles");

                    b.HasIndex("RolesId")
                        .HasDatabaseName("ix_permission_roles_role_id");

                    b.ToTable("role_permissions");
                });

            modelBuilder.Entity("PermissionUser", b =>
                {
                    b.Property<int>("PermissionsId")
                        .HasColumnType("int")
                        .HasColumnName("permission_id");

                    b.Property<int>("UsersId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("PermissionsId", "UsersId")
                        .HasName("pk_permission_users");

                    b.HasIndex("UsersId")
                        .HasDatabaseName("ix_permission_users_user_id");

                    b.ToTable("user_permissions");
                });

            modelBuilder.Entity("RoleServiceAccount", b =>
                {
                    b.Property<int>("RolesId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<int>("ServiceAccountsId")
                        .HasColumnType("int")
                        .HasColumnName("service_account_id");

                    b.HasKey("RolesId", "ServiceAccountsId")
                        .HasName("pk_role_service_accounts");

                    b.HasIndex("ServiceAccountsId")
                        .HasDatabaseName("ix_role_service_accounts_service_account_id");

                    b.ToTable("service_account_roles");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<int>("RolesId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<int>("UsersId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("RolesId", "UsersId")
                        .HasName("pk_role_users");

                    b.HasIndex("UsersId")
                        .HasDatabaseName("ix_role_users_user_id");

                    b.ToTable("user_roles");
                });

            modelBuilder.Entity("ServiceAccountTenant", b =>
                {
                    b.Property<int>("ServiceAccountsId")
                        .HasColumnType("int")
                        .HasColumnName("service_account_id");

                    b.Property<int>("TenantsId")
                        .HasColumnType("int")
                        .HasColumnName("tenant_id");

                    b.HasKey("ServiceAccountsId", "TenantsId")
                        .HasName("pk_service_account_tenants");

                    b.HasIndex("TenantsId")
                        .HasDatabaseName("ix_service_account_tenants_tenant_id");

                    b.ToTable("tenant_service_accounts");
                });

            modelBuilder.Entity("TenantUser", b =>
                {
                    b.Property<int>("GuestTenantsId")
                        .HasColumnType("int")
                        .HasColumnName("guest_tenant_id");

                    b.Property<int>("GuestUsersId")
                        .HasColumnType("int")
                        .HasColumnName("guest_user_id");

                    b.HasKey("GuestTenantsId", "GuestUsersId")
                        .HasName("pk_tenant_users");

                    b.HasIndex("GuestUsersId")
                        .HasDatabaseName("ix_tenant_users_guest_user_id");

                    b.ToTable("tenant_guest_users");
                });

            modelBuilder.Entity("GroupPermission", b =>
                {
                    b.HasOne("Nex.Data.Model.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .HasConstraintName("fk_group_permissions_groups_group_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nex.Data.Model.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionsId")
                        .HasConstraintName("fk_group_permissions_permissions_permission_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GroupRole", b =>
                {
                    b.HasOne("Nex.Data.Model.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .HasConstraintName("fk_group_roles_groups_group_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nex.Data.Model.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .HasConstraintName("fk_group_roles_roles_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GroupServiceAccount", b =>
                {
                    b.HasOne("Nex.Data.Model.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .HasConstraintName("fk_group_service_accounts_groups_group_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nex.Data.Model.ServiceAccount", null)
                        .WithMany()
                        .HasForeignKey("ServiceAccountsId")
                        .HasConstraintName("fk_group_service_accounts_service_accounts_service_account_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GroupUser", b =>
                {
                    b.HasOne("Nex.Data.Model.Group", null)
                        .WithMany()
                        .HasForeignKey("OwnedGroupsId")
                        .HasConstraintName("fk_group_users_groups_owned_group_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nex.Data.Model.User", null)
                        .WithMany()
                        .HasForeignKey("OwnersId")
                        .HasConstraintName("fk_group_users_users_owner_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GroupUser1", b =>
                {
                    b.HasOne("Nex.Data.Model.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .HasConstraintName("fk_group_user1s_groups_group_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nex.Data.Model.User", null)
                        .WithMany()
                        .HasForeignKey("MembersId")
                        .HasConstraintName("fk_group_user1s_users_member_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Nex.Data.Model.Group", b =>
                {
                    b.HasOne("Nex.Data.Model.Tenant", "Tenant")
                        .WithMany("Groups")
                        .HasForeignKey("TenantId")
                        .HasConstraintName("fk_groups_tenants_tenant_id");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Nex.Data.Model.PersonalAccessToken", b =>
                {
                    b.HasOne("Nex.Data.Model.ServiceAccount", null)
                        .WithMany("ApiKeys")
                        .HasForeignKey("ServiceAccountId")
                        .HasConstraintName("fk_personal_access_tokens_service_accounts_service_account_id");

                    b.HasOne("Nex.Data.Model.User", "User")
                        .WithMany("AccessTokens")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_personal_access_tokens_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Nex.Data.Model.Role", b =>
                {
                    b.HasOne("Nex.Data.Model.PersonalAccessToken", null)
                        .WithMany("Roles")
                        .HasForeignKey("PersonalAccessTokenId")
                        .HasConstraintName("fk_roles_personal_access_tokens_personal_access_token_id");

                    b.HasOne("Nex.Data.Model.Tenant", "Tenant")
                        .WithMany("Roles")
                        .HasForeignKey("TenantId")
                        .HasConstraintName("fk_roles_tenants_tenant_id");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Nex.Data.Model.TenantDomain", b =>
                {
                    b.HasOne("Nex.Data.Model.Tenant", "Tenant")
                        .WithMany("Domains")
                        .HasForeignKey("TenantId")
                        .HasConstraintName("fk_tenant_domains_tenants_tenant_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Nex.Data.Model.User", b =>
                {
                    b.HasOne("Nex.Data.Model.Tenant", "Tenant")
                        .WithMany("Users")
                        .HasForeignKey("TenantId")
                        .HasConstraintName("fk_users_tenants_tenant_id");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("PermissionRole", b =>
                {
                    b.HasOne("Nex.Data.Model.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionsId")
                        .HasConstraintName("fk_permission_roles_permissions_permission_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nex.Data.Model.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .HasConstraintName("fk_permission_roles_roles_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PermissionUser", b =>
                {
                    b.HasOne("Nex.Data.Model.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionsId")
                        .HasConstraintName("fk_permission_users_permissions_permission_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nex.Data.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .HasConstraintName("fk_permission_users_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleServiceAccount", b =>
                {
                    b.HasOne("Nex.Data.Model.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .HasConstraintName("fk_role_service_accounts_roles_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nex.Data.Model.ServiceAccount", null)
                        .WithMany()
                        .HasForeignKey("ServiceAccountsId")
                        .HasConstraintName("fk_role_service_accounts_service_accounts_service_account_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("Nex.Data.Model.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .HasConstraintName("fk_role_users_roles_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nex.Data.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .HasConstraintName("fk_role_users_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ServiceAccountTenant", b =>
                {
                    b.HasOne("Nex.Data.Model.ServiceAccount", null)
                        .WithMany()
                        .HasForeignKey("ServiceAccountsId")
                        .HasConstraintName("fk_service_account_tenants_service_accounts_service_account_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nex.Data.Model.Tenant", null)
                        .WithMany()
                        .HasForeignKey("TenantsId")
                        .HasConstraintName("fk_service_account_tenants_tenants_tenant_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TenantUser", b =>
                {
                    b.HasOne("Nex.Data.Model.Tenant", null)
                        .WithMany()
                        .HasForeignKey("GuestTenantsId")
                        .HasConstraintName("fk_tenant_users_tenants_guest_tenant_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nex.Data.Model.User", null)
                        .WithMany()
                        .HasForeignKey("GuestUsersId")
                        .HasConstraintName("fk_tenant_users_users_guest_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Nex.Data.Model.PersonalAccessToken", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("Nex.Data.Model.ServiceAccount", b =>
                {
                    b.Navigation("ApiKeys");
                });

            modelBuilder.Entity("Nex.Data.Model.Tenant", b =>
                {
                    b.Navigation("Domains");

                    b.Navigation("Groups");

                    b.Navigation("Roles");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Nex.Data.Model.User", b =>
                {
                    b.Navigation("AccessTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
